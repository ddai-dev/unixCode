10.133.146.250机器上操作apue代码

src.3e.tar.gz :unix高级编程代码

/root/unixcode      93机器（内网机器）

下载src.3e.tar.gz
http://apuebook.com/code3e.html




yum install libbsd-devel
yum install libbsd-0.6.0-1.el6.x86_64.rpm
wget http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm(外网环境才可以下载)
http://elrepo.reloumirrors.net/testing/el6/x86_64/RPMS/libbsd-0.2.0-4.el6.elrepo.x86_64.rpm(直接浏览器下载，传到93机器)
rpm -ivh libbsd-0.2.0-4.el6.elrepo.x86_64.rpm 


   cd apue.3e
   make
   用root用户或者sudo执行以下命令：
   cp ./include/apue.h /usr/include/         
   cp ./lib/libapue.a /usr/local/lib/ 
   cp ./lib/libapue.a /usr/lib/
   下载 apueerror.h
    cp apueerror.h  /usr/include/


在要编译运行的代码中#include<apue.h>的下一行增加一行：#include<apueerror.h>  

接下来，执行gcc编译命令就可以正确的运行书上所有的实例代码啦，千万别忘记啦在有引用到err_相关的方法的实例代码的头部引入apueerror.h头文件。




grep -rl "opendir" ./      -r ：递归查找子目录;   -l ：只显示文件名;   ./ ：当前目录路径
grep -rl "opendir"  *.c




第1章  intro
第3章  fileio
第4章  filedir
第5章  stdio
第7章  environ
第8章  proc







df /home 查看空闲空间
ln -sf testdir 创建软链接
unlink testdir 解除链接



/usr/include     stdio.h等头文件位置

/etc/passwd  口令文件 
/etc/group   组文件
/etc/hosts   主机
/etc/networks 网络



stty -a 显示终端所有选项


先看《Unix/Linux编程实践教程》作为过渡，看下《深入理解计算机系统》这本书，
tcp/ip卷一
深入理解计算机系统
Stevens著有三大本：UNIX环境高级编程、TCP/IP详解、UNIX网络编程。
假设读者拥有了最基础的操作系统理论，网络技术理论，以及UNIX理论和实践经验，并拥有数种业界常用的UNIX系统作为学习环境（在国外的大学里很容易获得），这样才能体会书中所述的细节。



real    0m4.309s   时钟时间
user    0m0.000s   用户cpu时间
sys     0m0.001s   系统cpu时间




0131   libevent
.................................
一 安装
libevent源代码分析-介绍、安装、使用

下载源码包libevent-2.0.22-stable.tar.gz
进行配置，把库安装到/usr目录下 ./configure --prefix=/usr
make
make install

检查是否安装成功:ls -al /usr/lib|grep libevent
找到默认路径，创建软连接：
报错解决办法:./a.out: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: Error 40
sudo ln -s /usr/lib/libevent-2.0.so.5 /lib64/libevent-2.0.so.5

gcc time.c  -l event

二 源码剖析
Reactor 的事件处理机制：

ls -al ./|grep internal //查询internal文件名


基本使用场景:gcc test-time.c -l event
1)初始化。event_init()
2)设置回调函数和关注事件。evtimer_set(&ev, timer_cb, NULL); 等价于void event_set(struct event *ev, int fd, short event, void (*cb)(int,short, void *), void *arg)
3)设置event从属的event_base。event_base_set(base, &ev);
4)正式添加事件。event_add(&ev, timeout);
5)程序进入无限循环，等待就绪事件并执行事件处理。event_dispatch();

__func__是一个字符串，值为调用__func__函数的函数名。


libevent用法，对于一个服务器而言，流程大致如下：
获取待监听的内容的fd；
创建一个event_base；
创建一个event,指定待监听的fd，待监听事件的类型，以及事件放生时的回调函数及传给回调函数的参数；
将event添加到event_base的事件管理器中；
开启event_base的事件处理循环；
（异步）当事件发生的时候，调用前面设置的回调函数。



D:/GO 1.9版本的设置至
idea+go plugin 或者vs code+go plugin
Eclipse+Goclipse、Sublime Text2、VIM、LiteIDE、Gedit等等。各有所好吧。比如我自己一贯喜欢用Eclipse/Visual Studio等作可视化调试，对Eclipse+Goclipse就有偏好。但像Gedit这样的就比较轻量级，用起来会觉得更可控一些。














